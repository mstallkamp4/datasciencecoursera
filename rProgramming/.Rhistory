#print(i)
nobdf=data.frame(id=i, nobs=nrow(goodrecords))
dfgood=data.frame(nitrate=goodrecords[2], sulfate=goodrecords[3])
if (nobdf$nobs > threshold)
{
bindedset<-rbind.data.frame(dfgood, bindedset)
}
y <- nrow(bindedset)
}
print (y)
sulfates<-bindedset[1]
nitrates<-bindedset[2]
cor(bindedset)
cor(sulfates,nitrates)
}
cr<-corr("specdata")
summary(cr)
head(cr)
type(cr)
class(cr)
corr <-function(directory, threshold=0) {
bindedset <-matrix
#print(bindedset)
for(i in 1:323)
{
filename <- paste("00",i, collapse="", sep="" )
filename <-substr(filename, nchar(filename)-2, nchar(filename))
filenamefull <- paste(directory, "\\", filename, ".csv", collapse="", sep="")
input <- read.csv(filenamefull)
##Read one csv to find out how to get complete records
#input <- read.csv("specdata\\001.csv")
#input
##Find the set where sulfate is not na
goodsulfates <-!is.na(input[2])
inputwithgoodsulfates <-(input[goodsulfates,])
inputwithgoodsulfates
goodnitrates <-!is.na(inputwithgoodsulfates[3])
goodrecords <-inputwithgoodsulfates[goodnitrates,]
#print(i)
nobdf=data.frame(id=i, nobs=nrow(goodrecords))
dfgood=data.frame(nitrate=goodrecords[2], sulfate=goodrecords[3])
if (nobdf$nobs > threshold)
{
for j in nobdf
{
bindedset<-rbind()
}
bindedset<-rbind.data.frame(dfgood, bindedset)
}
y <- nrow(bindedset)
}
print (y)
sulfates<-bindedset[1]
nitrates<-bindedset[2]
cor(bindedset)
cor(sulfates,nitrates)
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Returns a numeric vector of correlations
files <- (Sys.glob("specdata//*.csv"));
correlations <- c()
for (file in files) {
file_data <- read.csv(file, sep = ",");
complete_cases <- file_data[complete.cases(file_data),];
if (nrow(complete_cases) > threshold) {
correlations <- c(correlations, cor(complete_cases$sulfate, complete_cases$nitrate))
}
}
return(correlations)
}
cr<-corr("specdata")
head(cr)
Summary(cr)
cr<-corr("specdata")
test <-pollutantmean ("specdata", "sulfate", 1:10)
test
test <-pollutantmean ("specdata", "nitrate", 70:72)
test
test <-pollutantmean ("specdata", "sulfate", 34)
test
pollutantmean ("specdata", "nitrate")
pollutantmean <-function(directory, pollutant, id=1:332) {
bindedset <-vector(mode="numeric")
if (pollutant=="sulfate")
{
filenum<-2
}
if (pollutant=="nitrate")
{
filenum<-3
}
for(i in id)
{
filename <- paste("00",i, collapse="", sep="" )
filename <-substr(filename, nchar(filename)-2, nchar(filename))
filename
filenamefull <- paste(directory, "\\", filename, ".csv", collapse="", sep="")
##used for testing
##print (filenamefull)
input <- read.csv(filenamefull)
meanset <- input[,filenum]
bindedset <-append(bindedset, meanset)
##used for testing
##printedmean<-mean(meanset, na.rm=TRUE)
##used for testing
##printebindeddmean<-mean(bindedset, na.rm=TRUE)
##print(printebindeddmean)
}
mean(bindedset, na.rm=TRUE)
}
<-pollutantmean ("specdata", "nitrate")
pollutantmean ("specdata", "nitrate")
complete("specdata", c(6,10,20,34,100,200,310))
cc<-complete("specdata", c(6,10,20,34,100,200,310))
cc
print(cc$nobs)
cc<-complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(10, 332)
print(cc[use, "nobs"])
set.seed(42)
cc <- complete("specdata", 1:332)
use <- sample(10, 332)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
<-pollutantmean ("specdata", "nitrate")
-pollutantmean ("specdata", "nitrate")
-pollutantmean ("specdata", "sulfate", 34)
pollutantmean ("specdata", "sulfate", 1:10)
pollutantmean ("specdata", "nitrate", 70:72)
cc<-complete("specdata", 54)
print(cc$nobs)
cc <- complete("specdata", 1:332)
use <- sample(10, 332)
print(cc[use, "nobs"])
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc<-complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 1:332)
use <- sample(10, 332)
print(cc[use, "nobs"])
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
pollutantmean ("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
x <- list(a = 1:5; b = rnorm(10))
x <- list(a = 1:5, b = rnorm(10))
x
lapply(x,mean)
$a
x$a
lapply(x,mean)
X <-list(a = 1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5)
X <-list(a = 1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
x
lapply(x,mean
lapply(x,mean)
lapply(x,mean)
X <-list(a = 1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
x
lapply(x,mean)
X <-list(a = 1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
x
y <-list(a = 1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
y
lapply(y,mean)
lapply(x,runif)
l<-1:4
lapply(l,runif)
lapply(l,runif, min=0, max=10)
lapply(x, function(elt) elt[,1])
x <-list(a=matrix(1:4,2,2), b=matrix(1:6, 2,2))
lapply(x, function(elt) elt[,1])
x <-list(a=matrix(1:4,2,2), b=matrix(1:6, 2,2))
x
x <-list(a=matrix(1:4,2,2), b=matrix(1:6, 2,3))
lapply(x, function(elt) elt[,1])
x <-list(a=matrix(1:4,2,2), b=matrix(1:6, 2,1))
x
x <-list(a=matrix(1:4,2,2), b=matrix(1:6, 3,2))
x
x <-list(a=matrix(1:4,2,2), b=matrix(1:6, 2,3))
x
lapply(x, function(elt) elt[,1])
x <-list(a=matrix(1:4,2,2), b=matrix(1:9, 3,3))
x
lapply(x, function(elt) elt[,1])
y <-list(a = 1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
sapply(y, mean)
str(apply)
x < matrix(rnorm(200),20,10)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
str(apply)
apply(x,2,mean)
x
apply(x,2,mean)
apply(x,1,mean)
rowsums(x)
rowSums(x)
rowMean(x)
rowMeans(x)
colMeans(x) # = apply (x, 2, mean)
x <-matrix (rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(.25, .75))
a <- array(rnorm(2*2*10)), c(2,2,10))
a <- array(rnorm(2*2*10), c(2,2,10))
a
apply(1,c(1,2), mean) ##The averages of 2x2 matrices is a matrix
apply(a,c(1,2), mean) ##The averages of 2x2 matrices is a matrix
rowMeans(a)
rowMeans(a, dims=2)
str(mapply)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply (rep, 1:4, 4:1)
sapply(y, mean)
apply(bindedset, 1, cor)
corr <-function(directory, threshold=0) {
bindedset <-matrix
#print(bindedset)
for(i in 1:323)
{
filename <- paste("00",i, collapse="", sep="" )
filename <-substr(filename, nchar(filename)-2, nchar(filename))
filenamefull <- paste(directory, "\\", filename, ".csv", collapse="", sep="")
input <- read.csv(filenamefull)
##Read one csv to find out how to get complete records
#input <- read.csv("specdata\\001.csv")
#input
##Find the set where sulfate is not na
goodsulfates <-!is.na(input[2])
inputwithgoodsulfates <-(input[goodsulfates,])
inputwithgoodsulfates
goodnitrates <-!is.na(inputwithgoodsulfates[3])
goodrecords <-inputwithgoodsulfates[goodnitrates,]
#print(i)
nobdf=data.frame(id=i, nobs=nrow(goodrecords))
dfgood=data.frame(nitrate=goodrecords[2], sulfate=goodrecords[3])
if (nobdf$nobs > threshold)
{
for (j in nobdf)
{
bindedset<-rbind()
}
bindedset<-rbind.data.frame(dfgood, bindedset)
}
y <- nrow(bindedset)
}
print (y)
sulfates<-bindedset[1]
nitrates<-bindedset[2]
cor(bindedset)
apply(bindedset, 1, cor)
}
cr <- corr("specdata", 400)
mapply (rep, 1:4, 4:1)
noise <-function(n, mean, sd) {rnorm(n,mean,sd)
}
source('C:/GitHub/datasciencecoursera/rProgramming/Loop Functions.R', echo=TRUE)
mapply(noise, 1:5, 1:5, 2)
str(tapply)
x <- c(rnorm(10, runif(10, rnorm(10,1))))
f <- gl(3,10)
f
x
tapply(x, f, mean
tapply(x, f, mean)
tapply(x, f, mean)
x <- c(rnorm(10, runif(10, rnorm(10,1))))
x
f
w <- c(rnorm(10, runif(10, rnorm(10,1))))
w <- c(rnorm(10, runif(10), rnorm(10,1)))
w <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
f
x
tapply(x, f, mean)
c(rnorm(10), runif(10), rnorm(10,1))
w <- c(rnorm(10), runif(10), rnorm(10,1))
w
w
F
f
tapply(x, f, mean)
tapply(w, f, mean)
tapply(w, f, range)
tapply(w, f, mean)
str(split
x<-c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
lapply(split(x,f), mean
lapply(split(x,f), mean
lapply(split(x, f), mean)
x
f
x<-c(rnorm(10), runif(10), rnorm(10,1))
x<-c(rnorm(10), runif(10), rnorm(10,1))
x<-c(rnorm(10), runif(10), rnorm(10,1))
x<-c(rnorm(10), runif(10), rnorm(10,1))
lapply(split(x, f), mean)
library(datasets)
head(arquality)
head(airquality)
s <-split(arquality,airquality$Month)
s <-split(airquality,airquality$Month)
s
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R","Wind")])
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R","Wind")])
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R","Wind")], na.rm="TRUE"))
x <- rnorm(10)
f1 <-gl(2,5)
f2 <-gl(5,2)
l1
f1
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2), drop=TRUE))
log(-1)
printmessage <-function(x) {
if (x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
#invisible removes autoprinting from console
}
printmessage(10)
printmessage <-function(x) {
if (x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
#invisible(x)
#invisible removes autoprinting from console
}
printmessage(10)
printmessage <-function(x) {
if (x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
#invisible removes autoprinting from console
}
printmessage(NA)
printmessage <-function(x) {
if(is.na(x))
print("x is a missing value")
if (x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
#invisible removes autoprinting from console
}
printmessage(NA)
printmessage(NA)
x <- log(-1)
x
function(x)
function(x)
function(x)
function(x)
printmessage(x)
mean(x)
mean(x1)
tracebacK()
traceback()
mean(x1)
traceback()
lm(Y1_X1)
lm(Y1 - X1)
traceback()
debug(lm)
lm(y -x)
read.csv("nosuchfile")
options (error=recover)
read.csv("nosuchfile")
options
options (error=off
options (error=off)
?options
rm(list=ls())
packageVersion("swirl")
library("swirl")
swirl
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <-apply(flags, class)
cls_list <-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
?sapply
cls_list <-sapply(flags, class)
cls_vect <-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <flags[, 11:17]
flag_colors <_flags[, 11:17]
flag_colors <-flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <-flags[, 19:23]
lapply(flag_shapes, range())
options(error=NULL)
lapply(flag_shapes, range
)
shape_mat <-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flag_data, unique)
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, lengths)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem),elem[2])
lapply(unique_vals, function(elem)elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, characer(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flag$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
data(iris)
?iris
iris
tapply(iris$Sepal.Length, iris$Species, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
saply(mtcars, cyl, mean)
source('C:/GitHub/datasciencecoursera/rProgramming/Quiz 3.R', echo=TRUE)
debug(ls)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
options(null)
options(error=null)
options(error=NULL)
options(error=NULL)
options(error=NULL)
clearwd
rm(list=ls())
rm(list=ls())
makeVector
makeVector
